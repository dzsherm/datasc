### DATA TYPES
### We distinguish between the following four types of variables

x = 3 # Integer variable
print(x)

x = 2.5 # Float variable
print(x)

x = 'The contents of a string'
print(x) # String variable

x = True
print(x) # Boolean variable

### Examples of manipulations possible on numeric (Int & Float) variables (Many more are possible, e.g. cheat sheet)

# Addition
A = 2 + 3
print(A)
B = A + 5
print(B)

# Subtraction
A = 5 - 3
print(A)
B = A - 1
print(B)

# Multiplication
A = 3 * 2
print(A)
B = 4 * A
print(B)

# Division
A = 6 / 2
print(A)
B = A / 2
print(B)

### Examples of manipulations possible on a string variable

# Concatenate (= combining strings)
firstvar = "First string"
secondvar = "Second string"
newvar = firstvar + secondvar
print(newvar)

# Combine both string variables and literal string expressions
newvar = "First string" + " " + secondvar # Here we add a space between the two strings variables we want to concatenate
print(newvar)

# Replace (portions) of a string with others
oldvar = "Old text"
print(oldvar)
newvar = oldvar.replace("Old text","New text")
print(newvar)

# Split up string based on a defined character (e.g., a space)

sentence = 'This is a random sentence'
print(sentence)

# Splitting on each space, store result in variable 'chopped'
chopped = sentence.split(' ')
print(chopped)

# The split character could be any character, e.g., every 'i'
chopped = sentence.split('i')
print(chopped)

# Printing each element of the chopped up string
print(chopped[0]) # First word
print(chopped[1]) # Second word
print(chopped[2]) # Third word

### Verifying the datatype of your variable (or how Python interprets it)

varx = "Erik"
vary = 35
varz = 23.34
print(type(varx))
print(type(vary))
print(type(varz))

### Variables can be converted into each other if the values allow for it...

# Convert a string to an integer or float
varx = '1000' # Originally a string
print(type(varx)) # Shows that it's a string

varx = int(varx) # We change it into a integer
print(type(varx)) # Shows that it's an integer
varx = float(varx) # We change it into a float
print(type(varx)) # Shows that it's a float

varx = 'Random text'
#varx = int(varx) # Will cause error because cannot be converted!

# Convert an integer to a string
varx = 1000 # An integer variable
print(type(varx)) # Shows that it's an integer
varx = str(varx)
print(type(varx)) # Shows that it's a string

### Examples of boolean variables

varx = 4
vary = 5

# Suppose we want to test whether the value of varx is larger than the value of vary
result = varx > vary
print(result) # Will be 'False' of course

# Suppose we want to test whether the value of varx is larger than 2
result = varx > 2
print(result) # Will be 'True' of course

### DATA STRUCTURES
### We distinguish between four major data structures

varx = ['Erik','John','Lisa'] # A list
print(type(varx))
varx = {'Erik','John','Lisa'} # A set
print(type(varx))
varx = ('Erik','John','Lisa') # A tuple
print(type(varx))
varx = {'Name':'Erik','Age':25} # A dictionary
print(type(varx))

varx = [
	{'Name':'Erik','Age':25},
	{'Name':'John','Age':21},
	{'Name':'Lisa','Age':27}
] # A list (of dictionaries)
print(type(varx))

### LIST

emptylist = []
names = ['John','Mark','Lisa','Sarah']
distances = [45,23,120,56,87]
likes = ['9K','334','1.2M']

# Lists consist of elements. We can add each specific element (or range of elements) by calling its index (their placement in the list, starting from 0)

names = ['John','Mark','Lisa','Sarah'] # A list with four elements, with indices O,1,2,3

print(names[0]) # Print first element
print(names[1]) # Print second element 
print(names[2]) # Print third element 
print(names[3]) # Print fourth element
print(names[2:]) # Print from second to last element
print(names[:2]) # Print from first until (!) the third element
print(names[-1]) # Print last element
print(names[-2]) # Print last two elements

# We can manipulate lists (i.e., change them)

ourclass = ['Mark','Zoran','Jing','Lisa'] # A list with four elements, with indices O,1,2,3

ourclass.remove('Mark') # Mark is removed from our list
print(ourclass)

ourclass.append('Mark') # Mark is added again at the end of the list
print(ourclass)

ourclass.remove('Mark') # Mark is removed from our list
print(ourclass)

ourclass.insert(0,'Mark') # Mark is added again. First element of a list has an index 0 (!)
print(ourclass)

ourclass.sort() # Sorting the list; strings are sorted alfabetically
print(ourclass)

ourclass.reverse() # we can reverse our prior order
print(ourclass)

# Numerical lists offer specific opporunities:

listofnumbers = [3,4,9,12,4]
print(max(listofnumbers)) # Print highest number
print(min(listofnumbers)) # Print smallest number
print(sum(listofnumbers)) # Print sum of all numbers
listofnumbers.sort() # Sort (small to large by default)
print(listofnumbers)
listofnumbers.reverse() # Reverse sorting
print(listofnumbers)

# We can - of course - glue lists together and even search in them

lista = ['a','e','f']
listb = ['c','d','e']

# Combine lista and listb
listab = lista + listb
# Check whether 'a' and 'd' are in listab
print('a' in listab) # There's an 'a' in the combined list, so this will return a value 'True'
print('d' in listab) # There's a 'd' in the combined list, so this will return a value 'True'

# Count occurence of element
print(listab.count('e'))

### SET

# Similar to a list, but with fewer opportunities. Contains no duplicates... (unique elements only)

uniquenames = {'Jane','Marc','Joe'} # This is a set
print(uniquenames)

names = ['Jane','Marc','Joe','Joe'] # This is a list
print(names)

uniquenames = set(names) # The list names is the list converted to a set called uniquenames
print(uniquenames)

### DICTIONARY

participant = {'name':'Mark','age':23, 'weight':75,'length':1.75}

person = {
'name':'Mark',
'age':23,
'weight':75,
'length':1.75
}

# 'name', 'age', 'weight', and 'length' are keys
# 'Mark',23,75,1.75 are values
# 'name'='Mark' is a key-value pair

# Both of the above notations are equivalent. The second is a bit more practical though
print(participant)
print(person)

# Access values (through their keys)

# We can access each element seperately, by refering to the key
print(person['name'])
print(person['age'])
print(person['weight'])
print(person['length'])

# We can change value of a specific key
person['age'] = 25
print('Changed age to',person['age'])

# Accessing this information allows to build programs, of which the output could be stored as a new key-value pair - EXAMPLE: a BMI calculator

participant = {'name':'Mark','age':23, 'weight':75,'length':1.75}
# Add key 'bmi'
participant['bmi'] = participant['weight']/(participant['length']**2)
print('BMI:',participant['bmi'])
# Delete key 'bmi'
del participant['bmi']
#print(participant['bmi']) # And now it's gone... so actually running this would produce an error that would stop the script

### LIST OF DICTIONARIES - or how to deal with two-dimensional datasets as we know them from for example survey research

mydataset = [{'name':'Mark','age':23,'weight':75,'length':1.75},{'name':'Jane','age':21,'weight':60,'length':1.70},{'name':'Eric','age':30,'weight':80,'length':1.78},]

# Logic for accessing remains te same...

# We can access each (or range of) row(s):
print(mydataset[0]) # print first line in dataset
print(mydataset[1]) # print second line in dataset
print(mydataset[2]) # print third line in dataset

# We can dive in deeper by getting values for the keys of certain rows
print(mydataset[0]['name']) # print name value in first line in dataset
print(mydataset[2]['age']) # print age value in third line in dataset


#AGE
mydata = [
	{'name':'Mark','yob':1976},
	{'name':'Jane','yob':1999},
	{'name':'Eric','yob':2002},
	]

# Write a program that transforms the years of birth to years of age

for item in mydata:
	# Add age as a new key in the already given list of dictionaries
	item['age'] = 2020 - item['yob']

	# Print the name and the age of every person if they are over 30 years old
	if item['age'] > 30:
		print(item['name'],'is',item['age'],'old')
    
    import string # Package to process strings
import random # Package to randomize things

alphabet = string.ascii_letters.lower()[0:26]
print(alphabet)

randomstring = ""

while len(randomstring) < 10:
	letter = random.choice(alphabet)
	randomstring = randomstring + letter
	print(randomstring)
  
  # Iterate through the imported data
for item in data:
  urllist.append(item['URL'].split('/')[0])
# We get the value for the URL key in each iteration
# We split on the /, which returns a list with the url in bits and pieces
# The first bit (or element in that list), is the domain name
# We append that domain name to urllist

print(set(urllist)) # We print urllist as a set so we're sure that there are no duplicates, only uniques
print(urllist.count('www.hln.be')) # We count the amount of times www.hln.be is in the list (this is on the list, not a set version of it)

topthree = [] # empty list that will be our list of dictionaries with top three results we want to export in a file

for item in data:
  if item['Rank'] < 4: # Conditional to make sure we only add information of top three results
    print(item['URL'],item['Rank']) # Just printing the top three resuls' URL and Rank
    topthree.append({'URL':item['URL'],'Rank':item['Rank']}) # topthree list - empty before loop - is populated with top 3 results
# Note that we are adding a dictionary to the list per iteration, containing the iteration value of URL and Rank

# New data, hardcoded into our script:
data = pd.DataFrame(data) # Converting list of dictionaries into dataframe
data.to_csv('instagram_clean.csv',sep=';',index=False) # Writing dataframe into CSV file

# READING
 
# Import pandas
import pandas as pd
 
data = pd.read_csv('csvtutorial.csv',sep=';') # Reading data from csv
data = data.T.to_dict().values() # Converting dataframe into list of dictionaries
 
# Iterate through the imported data
for item in data:
	print(item)
